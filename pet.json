
object
{10}
swagger
:
"2.0"
info
{6}
description
:
"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."
version
:
"1.0.7"
title
:
"Swagger Petstore"
termsOfService
:
"http://swagger.io/terms/"
contact
{1}
email
:
"apiteam@swagger.io"
license
{2}
name
:
"Apache 2.0"
url
:
"http://www.apache.org/licenses/LICENSE-2.0.html"
host
:
"petstore.swagger.io"
basePath
:
"/v2"
tags
[3]
0
{3}
name
:
"pet"
description
:
"Everything about your Pets"
externalDocs
{2}
description
:
"Find out more"
url
:
"http://swagger.io"
1
{2}
name
:
"store"
description
:
"Access to Petstore orders"
2
{3}
name
:
"user"
description
:
"Operations about user"
externalDocs
{2}
description
:
"Find out more about our store"
url
:
"http://swagger.io"
schemes
[2]
0
:
"https"
1
:
"http"
paths
{14}
/pet/{petId}
{3}
get
{8}
tags
[1]
0
:
"pet"
summary
:
"Find pet by ID"
description
:
"Returns a single pet"
operationId
:
"getPetById"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{6}
name
:
"petId"
in
:
"path"
description
:
"ID of pet to return"
required
:
true
type
:
"integer"
format
:
"int64"
responses
{3}
200
{2}
description
:
"successful operation"
schema
{1}
$ref
:
"#/definitions/Pet"
400
{1}
description
:
"Invalid ID supplied"
404
{1}
description
:
"Pet not found"
security
[1]
0
{1}
api_key
:
[]
post
{9}
tags
[1]
0
:
"pet"
summary
:
"Updates a pet in the store with form data"
description
:
""
operationId
:
"updatePetWithForm"
consumes
[1]
0
:
"application/x-www-form-urlencoded"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[3]
0
{6}
name
:
"petId"
in
:
"path"
description
:
"ID of pet that needs to be updated"
required
:
true
type
:
"integer"
format
:
"int64"
1
{5}
name
:
"name"
in
:
"formData"
description
:
"Updated name of the pet"
required
:
false
type
:
"string"
2
{5}
name
:
"status"
in
:
"formData"
description
:
"Updated status of the pet"
required
:
false
type
:
"string"
responses
{1}
405
{1}
description
:
"Invalid input"
security
[1]
0
{1}
petstore_auth
[2]
0
:
"write:pets"
1
:
"read:pets"
delete
{8}
tags
[1]
0
:
"pet"
summary
:
"Deletes a pet"
description
:
""
operationId
:
"deletePet"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[2]
0
{4}
name
:
"api_key"
in
:
"header"
required
:
false
type
:
"string"
1
{6}
name
:
"petId"
in
:
"path"
description
:
"Pet id to delete"
required
:
true
type
:
"integer"
format
:
"int64"
responses
{2}
400
{1}
description
:
"Invalid ID supplied"
404
{1}
description
:
"Pet not found"
security
[1]
0
{1}
petstore_auth
[2]
0
:
"write:pets"
1
:
"read:pets"
/pet/{petId}/uploadImage
{1}
post
{9}
tags
[1]
0
:
"pet"
summary
:
"uploads an image"
description
:
""
operationId
:
"uploadFile"
consumes
[1]
0
:
"multipart/form-data"
produces
[1]
0
:
"application/json"
parameters
[3]
0
{6}
name
:
"petId"
in
:
"path"
description
:
"ID of pet to update"
required
:
true
type
:
"integer"
format
:
"int64"
1
{5}
name
:
"additionalMetadata"
in
:
"formData"
description
:
"Additional data to pass to server"
required
:
false
type
:
"string"
2
{5}
name
:
"file"
in
:
"formData"
description
:
"file to upload"
required
:
false
type
:
"file"
responses
{1}
200
{2}
description
:
"successful operation"
schema
{1}
$ref
:
"#/definitions/ApiResponse"
security
[1]
0
{1}
petstore_auth
[2]
0
:
"write:pets"
1
:
"read:pets"
/pet
{2}
post
{9}
tags
[1]
0
:
"pet"
summary
:
"Add a new pet to the store"
description
:
""
operationId
:
"addPet"
consumes
[2]
0
:
"application/json"
1
:
"application/xml"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
in
:
"body"
name
:
"body"
description
:
"Pet object that needs to be added to the store"
required
:
true
schema
{1}
$ref
:
"#/definitions/Pet"
responses
{1}
405
{1}
description
:
"Invalid input"
security
[1]
0
{1}
petstore_auth
[2]
0
:
"write:pets"
1
:
"read:pets"
put
{9}
tags
[1]
0
:
"pet"
summary
:
"Update an existing pet"
description
:
""
operationId
:
"updatePet"
consumes
[2]
0
:
"application/json"
1
:
"application/xml"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
in
:
"body"
name
:
"body"
description
:
"Pet object that needs to be added to the store"
required
:
true
schema
{1}
$ref
:
"#/definitions/Pet"
responses
{3}
400
{1}
description
:
"Invalid ID supplied"
404
{1}
description
:
"Pet not found"
405
{1}
description
:
"Validation exception"
security
[1]
0
{1}
petstore_auth
[2]
0
:
"write:pets"
1
:
"read:pets"
/pet/findByStatus
{1}
get
{8}
tags
[1]
0
:
"pet"
summary
:
"Finds Pets by status"
description
:
"Multiple status values can be provided with comma separated strings"
operationId
:
"findPetsByStatus"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{7}
name
:
"status"
in
:
"query"
description
:
"Status values that need to be considered for filter"
required
:
true
type
:
"array"
items
{3}
type
:
"string"
enum
[3]
0
:
"available"
1
:
"pending"
2
:
"sold"
default
:
"available"
collectionFormat
:
"multi"
responses
{2}
200
{2}
description
:
"successful operation"
schema
{2}
type
:
"array"
items
{1}
$ref
:
"#/definitions/Pet"
400
{1}
description
:
"Invalid status value"
security
[1]
0
{1}
petstore_auth
[2]
0
:
"write:pets"
1
:
"read:pets"
/pet/findByTags
{1}
get
{9}
tags
[1]
0
:
"pet"
summary
:
"Finds Pets by tags"
description
:
"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
operationId
:
"findPetsByTags"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{7}
name
:
"tags"
in
:
"query"
description
:
"Tags to filter by"
required
:
true
type
:
"array"
items
{1}
type
:
"string"
collectionFormat
:
"multi"
responses
{2}
200
{2}
description
:
"successful operation"
schema
{2}
type
:
"array"
items
{1}
$ref
:
"#/definitions/Pet"
400
{1}
description
:
"Invalid tag value"
security
[1]
0
{1}
petstore_auth
[2]
0
:
"write:pets"
1
:
"read:pets"
deprecated
:
true
/store/inventory
{1}
get
{8}
tags
[1]
0
:
"store"
summary
:
"Returns pet inventories by status"
description
:
"Returns a map of status codes to quantities"
operationId
:
"getInventory"
produces
[1]
0
:
"application/json"
parameters
:
[]
responses
{1}
200
{2}
description
:
"successful operation"
schema
{2}
type
:
"object"
additionalProperties
{2}
type
:
"integer"
format
:
"int32"
security
[1]
0
{1}
api_key
:
[]
/store/order/{orderId}
{2}
get
{7}
tags
[1]
0
:
"store"
summary
:
"Find purchase order by ID"
description
:
"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
operationId
:
"getOrderById"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{8}
name
:
"orderId"
in
:
"path"
description
:
"ID of pet that needs to be fetched"
required
:
true
type
:
"integer"
maximum
:
10
minimum
:
1
format
:
"int64"
responses
{3}
200
{2}
description
:
"successful operation"
schema
{1}
$ref
:
"#/definitions/Order"
400
{1}
description
:
"Invalid ID supplied"
404
{1}
description
:
"Order not found"
delete
{7}
tags
[1]
0
:
"store"
summary
:
"Delete purchase order by ID"
description
:
"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
operationId
:
"deleteOrder"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{7}
name
:
"orderId"
in
:
"path"
description
:
"ID of the order that needs to be deleted"
required
:
true
type
:
"integer"
minimum
:
1
format
:
"int64"
responses
{2}
400
{1}
description
:
"Invalid ID supplied"
404
{1}
description
:
"Order not found"
/store/order
{1}
post
{8}
tags
[1]
0
:
"store"
summary
:
"Place an order for a pet"
description
:
""
operationId
:
"placeOrder"
consumes
[1]
0
:
"application/json"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
in
:
"body"
name
:
"body"
description
:
"order placed for purchasing the pet"
required
:
true
schema
{1}
$ref
:
"#/definitions/Order"
responses
{2}
200
{2}
description
:
"successful operation"
schema
{1}
$ref
:
"#/definitions/Order"
400
{1}
description
:
"Invalid Order"
/user/{username}
{3}
get
{7}
tags
[1]
0
:
"user"
summary
:
"Get user by user name"
description
:
""
operationId
:
"getUserByName"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
name
:
"username"
in
:
"path"
description
:
"The name that needs to be fetched. Use user1 for testing. "
required
:
true
type
:
"string"
responses
{3}
200
{2}
description
:
"successful operation"
schema
{1}
$ref
:
"#/definitions/User"
400
{1}
description
:
"Invalid username supplied"
404
{1}
description
:
"User not found"
put
{8}
tags
[1]
0
:
"user"
summary
:
"Updated user"
description
:
"This can only be done by the logged in user."
operationId
:
"updateUser"
consumes
[1]
0
:
"application/json"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[2]
0
{5}
name
:
"username"
in
:
"path"
description
:
"name that need to be updated"
required
:
true
type
:
"string"
1
{5}
in
:
"body"
name
:
"body"
description
:
"Updated user object"
required
:
true
schema
{1}
$ref
:
"#/definitions/User"
responses
{2}
400
{1}
description
:
"Invalid user supplied"
404
{1}
description
:
"User not found"
delete
{7}
tags
[1]
0
:
"user"
summary
:
"Delete user"
description
:
"This can only be done by the logged in user."
operationId
:
"deleteUser"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
name
:
"username"
in
:
"path"
description
:
"The name that needs to be deleted"
required
:
true
type
:
"string"
responses
{2}
400
{1}
description
:
"Invalid username supplied"
404
{1}
description
:
"User not found"
/user
{1}
post
{8}
tags
[1]
0
:
"user"
summary
:
"Create user"
description
:
"This can only be done by the logged in user."
operationId
:
"createUser"
consumes
[1]
0
:
"application/json"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
in
:
"body"
name
:
"body"
description
:
"Created user object"
required
:
true
schema
{1}
$ref
:
"#/definitions/User"
responses
{1}
default
{1}
description
:
"successful operation"
/user/createWithArray
{1}
post
{8}
tags
[1]
0
:
"user"
summary
:
"Creates list of users with given input array"
description
:
""
operationId
:
"createUsersWithArrayInput"
consumes
[1]
0
:
"application/json"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
in
:
"body"
name
:
"body"
description
:
"List of user object"
required
:
true
schema
{2}
type
:
"array"
items
{1}
$ref
:
"#/definitions/User"
responses
{1}
default
{1}
description
:
"successful operation"
/user/createWithList
{1}
post
{8}
tags
[1]
0
:
"user"
summary
:
"Creates list of users with given input array"
description
:
""
operationId
:
"createUsersWithListInput"
consumes
[1]
0
:
"application/json"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[1]
0
{5}
in
:
"body"
name
:
"body"
description
:
"List of user object"
required
:
true
schema
{2}
type
:
"array"
items
{1}
$ref
:
"#/definitions/User"
responses
{1}
default
{1}
description
:
"successful operation"
/user/login
{1}
get
{7}
tags
[1]
0
:
"user"
summary
:
"Logs user into the system"
description
:
""
operationId
:
"loginUser"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
[2]
0
{5}
name
:
"username"
in
:
"query"
description
:
"The user name for login"
required
:
true
type
:
"string"
1
{5}
name
:
"password"
in
:
"query"
description
:
"The password for login in clear text"
required
:
true
type
:
"string"
responses
{2}
200
{3}
description
:
"successful operation"
headers
{2}
X-Expires-After
{3}
type
:
"string"
format
:
"date-time"
description
:
"date in UTC when token expires"
X-Rate-Limit
{3}
type
:
"integer"
format
:
"int32"
description
:
"calls per hour allowed by the user"
schema
{1}
type
:
"string"
400
{1}
description
:
"Invalid username/password supplied"
/user/logout
{1}
get
{7}
tags
[1]
0
:
"user"
summary
:
"Logs out current logged in user session"
description
:
""
operationId
:
"logoutUser"
produces
[2]
0
:
"application/json"
1
:
"application/xml"
parameters
:
[]
responses
{1}
default
{1}
description
:
"successful operation"
securityDefinitions
{2}
api_key
{3}
type
:
"apiKey"
name
:
"api_key"
in
:
"header"
petstore_auth
{4}
type
:
"oauth2"
authorizationUrl
:
"https://petstore.swagger.io/oauth/authorize"
flow
:
"implicit"
scopes
{2}
read:pets
:
"read your pets"
write:pets
:
"modify pets in your account"
definitions
{6}
Category
{3}
type
:
"object"
properties
{2}
id
{2}
type
:
"integer"
format
:
"int64"
name
{1}
type
:
"string"
xml
{1}
name
:
"Category"
Pet
{4}
type
:
"object"
required
[2]
0
:
"name"
1
:
"photoUrls"
properties
{6}
id
{2}
type
:
"integer"
format
:
"int64"
category
{1}
$ref
:
"#/definitions/Category"
name
{2}
type
:
"string"
example
:
"doggie"
photoUrls
{3}
type
:
"array"
xml
{1}
wrapped
:
true
items
{2}
type
:
"string"
xml
{1}
name
:
"photoUrl"
tags
{3}
type
:
"array"
xml
{1}
wrapped
:
true
items
{2}
xml
{1}
name
:
"tag"
$ref
:
"#/definitions/Tag"
status
{3}
type
:
"string"
description
:
"pet status in the store"
enum
[3]
0
:
"available"
1
:
"pending"
2
:
"sold"
xml
{1}
name
:
"Pet"
Tag
{3}
type
:
"object"
properties
{2}
id
{2}
type
:
"integer"
format
:
"int64"
name
{1}
type
:
"string"
xml
{1}
name
:
"Tag"
ApiResponse
{2}
type
:
"object"
properties
{3}
code
{2}
type
:
"integer"
format
:
"int32"
type
{1}
type
:
"string"
message
{1}
type
:
"string"
Order
{3}
type
:
"object"
properties
{6}
id
{2}
type
:
"integer"
format
:
"int64"
petId
{2}
type
:
"integer"
format
:
"int64"
quantity
{2}
type
:
"integer"
format
:
"int32"
shipDate
{2}
type
:
"string"
format
:
"date-time"
status
{3}
type
:
"string"
description
:
"Order Status"
enum
[3]
0
:
"placed"
1
:
"approved"
2
:
"delivered"
complete
{1}
type
:
"boolean"
xml
{1}
name
:
"Order"
User
{3}
type
:
"object"
properties
{8}
id
{2}
type
:
"integer"
format
:
"int64"
username
{1}
type
:
"string"
firstName
{1}
type
:
"string"
lastName
{1}
type
:
"string"
email
{1}
type
:
"string"
password
{1}
type
:
"string"
phone
{1}
type
:
"string"
userStatus
{3}
type
:
"integer"
format
:
"int32"
description
:
"User Status"
xml
{1}
name
:
"User"
externalDocs
{2}
description
:
"Find out more about Swagger"
url
:
"http://swagger.io"

